using System;
using System.Diagnostics;
using System.Net;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using RestSharp;
using RestSharp.Authenticators;
using RestSharp.Serializers;
using Sharebase.API.Interfaces;
using Sharebase.API.Helpers;

namespace Sharebase.API {
    /// <summary>
    /// Base Class for APIs
    /// </summary>
    public partial class SharebaseSharp : ISharebaseSharp {
        readonly string _bearerToken;
        readonly string _BaseURL;
        readonly string _MachineName;

        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        /// <param name="publicKey">The bearer token for API access. This must be generated by a Sharebase Administrator.</param>
        /// <param name="baseURL">The Base URL to use for API functions and calls.</param>   
        /// <param name="machineName">The name of the computer running the API process.</param>   
        public SharebaseSharp (string bearerToken, string baseURL, string machineName) {
            _bearerToken = bearerToken;
            _BaseURL = baseURL;
            _MachineName = machineName;
        }

        /// <summary>
        /// Execute the Call to the Sharebase API. All methods return this base method.
        /// </summary>
        /// <typeparam name="T">The model or type to bind the return response.</typeparam>
        /// <param name="request">The RestRequest request.</param>
        /// <returns>Response data from the API call.</returns>
        private T Execute<T> (RestRequest request) where T : new () {
            // Set TLS to 1.2. May need to update this in a decade when TLS 1.2 is phased out.
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

            var client = new RestClient ();
            client.BaseUrl = new Uri (_BaseURL);
            client.AddDefaultHeader ("Authorization", _bearerToken);

            request.RequestFormat = DataFormat.Json;

            Newtonsoft.Json.JsonSerializer serializer = new Newtonsoft.Json.JsonSerializer ();
            serializer.Converters.Add (new Newtonsoft.Json.Converters.StringEnumConverter ());
            request.JsonSerializer = new SharebaseSerializer (serializer);

            IRestResponse<T> execute = client.Execute<T> (request);
            checkResponse (execute);

            T response = JsonConvert.DeserializeObject<T> (execute.Content);
            return response;
        }

        private void checkResponse (IRestResponse response) {
            int code = (int) response.StatusCode;
            if (code >= 400) {
                throw new SharebaseException (response);
            }
        }
    }
}